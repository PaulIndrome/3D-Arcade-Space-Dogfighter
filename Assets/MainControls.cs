//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MainControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainControls"",
    ""maps"": [
        {
            ""name"": ""Free Flight"",
            ""id"": ""cda8c4c3-6f11-49e0-b97d-0a2b7d8b13b7"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""3fe705c1-cae7-4bdd-9659-693c10480cd9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VelocityChange"",
                    ""type"": ""Value"",
                    ""id"": ""dbf69ccb-b54d-458a-afdd-43f1c3494a3f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Strafe"",
                    ""type"": ""Value"",
                    ""id"": ""8cd88de1-ef55-41e9-bc0d-a5707f09e8e9"",
                    ""expectedControlType"": ""Digital"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4712432f-f69b-4652-ba8e-fbabd0950f2b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),NormalizeVector2,StickDeadzone"",
                    ""groups"": ""Spaceship"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5bf9571-0ca6-4f54-9133-602103c122a8"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone,Normalize(min=-1,max=1)"",
                    ""groups"": ""Spaceship"",
                    ""action"": ""VelocityChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fccc49be-beaa-46ea-b83c-9bd7ef061aba"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone(min=0.5),Normalize(min=-1,max=1)"",
                    ""groups"": ""Spaceship"",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Spaceship"",
            ""bindingGroup"": ""Spaceship"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Free Flight
        m_FreeFlight = asset.FindActionMap("Free Flight", throwIfNotFound: true);
        m_FreeFlight_Turn = m_FreeFlight.FindAction("Turn", throwIfNotFound: true);
        m_FreeFlight_VelocityChange = m_FreeFlight.FindAction("VelocityChange", throwIfNotFound: true);
        m_FreeFlight_Strafe = m_FreeFlight.FindAction("Strafe", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Free Flight
    private readonly InputActionMap m_FreeFlight;
    private IFreeFlightActions m_FreeFlightActionsCallbackInterface;
    private readonly InputAction m_FreeFlight_Turn;
    private readonly InputAction m_FreeFlight_VelocityChange;
    private readonly InputAction m_FreeFlight_Strafe;
    public struct FreeFlightActions
    {
        private @MainControls m_Wrapper;
        public FreeFlightActions(@MainControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_FreeFlight_Turn;
        public InputAction @VelocityChange => m_Wrapper.m_FreeFlight_VelocityChange;
        public InputAction @Strafe => m_Wrapper.m_FreeFlight_Strafe;
        public InputActionMap Get() { return m_Wrapper.m_FreeFlight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FreeFlightActions set) { return set.Get(); }
        public void SetCallbacks(IFreeFlightActions instance)
        {
            if (m_Wrapper.m_FreeFlightActionsCallbackInterface != null)
            {
                @Turn.started -= m_Wrapper.m_FreeFlightActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_FreeFlightActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_FreeFlightActionsCallbackInterface.OnTurn;
                @VelocityChange.started -= m_Wrapper.m_FreeFlightActionsCallbackInterface.OnVelocityChange;
                @VelocityChange.performed -= m_Wrapper.m_FreeFlightActionsCallbackInterface.OnVelocityChange;
                @VelocityChange.canceled -= m_Wrapper.m_FreeFlightActionsCallbackInterface.OnVelocityChange;
                @Strafe.started -= m_Wrapper.m_FreeFlightActionsCallbackInterface.OnStrafe;
                @Strafe.performed -= m_Wrapper.m_FreeFlightActionsCallbackInterface.OnStrafe;
                @Strafe.canceled -= m_Wrapper.m_FreeFlightActionsCallbackInterface.OnStrafe;
            }
            m_Wrapper.m_FreeFlightActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @VelocityChange.started += instance.OnVelocityChange;
                @VelocityChange.performed += instance.OnVelocityChange;
                @VelocityChange.canceled += instance.OnVelocityChange;
                @Strafe.started += instance.OnStrafe;
                @Strafe.performed += instance.OnStrafe;
                @Strafe.canceled += instance.OnStrafe;
            }
        }
    }
    public FreeFlightActions @FreeFlight => new FreeFlightActions(this);
    private int m_SpaceshipSchemeIndex = -1;
    public InputControlScheme SpaceshipScheme
    {
        get
        {
            if (m_SpaceshipSchemeIndex == -1) m_SpaceshipSchemeIndex = asset.FindControlSchemeIndex("Spaceship");
            return asset.controlSchemes[m_SpaceshipSchemeIndex];
        }
    }
    public interface IFreeFlightActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnVelocityChange(InputAction.CallbackContext context);
        void OnStrafe(InputAction.CallbackContext context);
    }
}
