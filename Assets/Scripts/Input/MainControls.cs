//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/MainControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainControls"",
    ""maps"": [
        {
            ""name"": ""Free Flight"",
            ""id"": ""cda8c4c3-6f11-49e0-b97d-0a2b7d8b13b7"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""3fe705c1-cae7-4bdd-9659-693c10480cd9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VelocityChange"",
                    ""type"": ""Value"",
                    ""id"": ""dbf69ccb-b54d-458a-afdd-43f1c3494a3f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Strafe"",
                    ""type"": ""Value"",
                    ""id"": ""8cd88de1-ef55-41e9-bc0d-a5707f09e8e9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.8)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ResetOrientation"",
                    ""type"": ""Button"",
                    ""id"": ""01e8326a-955a-4b7a-9838-5742c8d68269"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drift"",
                    ""type"": ""Button"",
                    ""id"": ""9de613cb-095d-460f-920b-61696016b9a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Value"",
                    ""id"": ""9470a6ae-6520-4d36-9f16-4a48dd9cb33e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""6dda2307-01b8-4f5c-806e-89276e4374e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectGatlingWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""b0630911-5dc8-43c4-a2d9-28084ddc391f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectRocketWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""5e77a749-de20-49b4-a95a-822b6698b4bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectEnergyWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""3f28c408-76ab-41ec-95b7-b40ce1edf2a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4712432f-f69b-4652-ba8e-fbabd0950f2b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),StickDeadzone(min=0.15,max=0.99)"",
                    ""groups"": ""Spaceship"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5bf9571-0ca6-4f54-9133-602103c122a8"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone,Normalize(min=-1,max=1)"",
                    ""groups"": ""Spaceship"",
                    ""action"": ""VelocityChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fccc49be-beaa-46ea-b83c-9bd7ef061aba"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Spaceship"",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d06a7010-ee45-4e50-8065-ce66532b5c5f"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Spaceship"",
                    ""action"": ""ResetOrientation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0a93e34-fac0-4d8e-9902-9fd1a2e37614"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Spaceship"",
                    ""action"": ""Drift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f255812-a9f5-48fa-a52a-59ea83a43f43"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Spaceship"",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""485a7824-99e6-44b0-a31a-a39d0cfd231c"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Spaceship"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68a62514-0433-4cdc-aebf-08a075a73f71"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Spaceship"",
                    ""action"": ""SelectGatlingWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""056b0bf5-f225-40ec-876e-522868a32adb"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Spaceship"",
                    ""action"": ""SelectRocketWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8460c39-9bc4-419f-a68e-7e70e0c3456e"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Spaceship"",
                    ""action"": ""SelectEnergyWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Spaceship"",
            ""bindingGroup"": ""Spaceship"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Free Flight
        m_FreeFlight = asset.FindActionMap("Free Flight", throwIfNotFound: true);
        m_FreeFlight_Turn = m_FreeFlight.FindAction("Turn", throwIfNotFound: true);
        m_FreeFlight_VelocityChange = m_FreeFlight.FindAction("VelocityChange", throwIfNotFound: true);
        m_FreeFlight_Strafe = m_FreeFlight.FindAction("Strafe", throwIfNotFound: true);
        m_FreeFlight_ResetOrientation = m_FreeFlight.FindAction("ResetOrientation", throwIfNotFound: true);
        m_FreeFlight_Drift = m_FreeFlight.FindAction("Drift", throwIfNotFound: true);
        m_FreeFlight_Boost = m_FreeFlight.FindAction("Boost", throwIfNotFound: true);
        m_FreeFlight_Fire = m_FreeFlight.FindAction("Fire", throwIfNotFound: true);
        m_FreeFlight_SelectGatlingWeapon = m_FreeFlight.FindAction("SelectGatlingWeapon", throwIfNotFound: true);
        m_FreeFlight_SelectRocketWeapon = m_FreeFlight.FindAction("SelectRocketWeapon", throwIfNotFound: true);
        m_FreeFlight_SelectEnergyWeapon = m_FreeFlight.FindAction("SelectEnergyWeapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Free Flight
    private readonly InputActionMap m_FreeFlight;
    private List<IFreeFlightActions> m_FreeFlightActionsCallbackInterfaces = new List<IFreeFlightActions>();
    private readonly InputAction m_FreeFlight_Turn;
    private readonly InputAction m_FreeFlight_VelocityChange;
    private readonly InputAction m_FreeFlight_Strafe;
    private readonly InputAction m_FreeFlight_ResetOrientation;
    private readonly InputAction m_FreeFlight_Drift;
    private readonly InputAction m_FreeFlight_Boost;
    private readonly InputAction m_FreeFlight_Fire;
    private readonly InputAction m_FreeFlight_SelectGatlingWeapon;
    private readonly InputAction m_FreeFlight_SelectRocketWeapon;
    private readonly InputAction m_FreeFlight_SelectEnergyWeapon;
    public struct FreeFlightActions
    {
        private @MainControls m_Wrapper;
        public FreeFlightActions(@MainControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_FreeFlight_Turn;
        public InputAction @VelocityChange => m_Wrapper.m_FreeFlight_VelocityChange;
        public InputAction @Strafe => m_Wrapper.m_FreeFlight_Strafe;
        public InputAction @ResetOrientation => m_Wrapper.m_FreeFlight_ResetOrientation;
        public InputAction @Drift => m_Wrapper.m_FreeFlight_Drift;
        public InputAction @Boost => m_Wrapper.m_FreeFlight_Boost;
        public InputAction @Fire => m_Wrapper.m_FreeFlight_Fire;
        public InputAction @SelectGatlingWeapon => m_Wrapper.m_FreeFlight_SelectGatlingWeapon;
        public InputAction @SelectRocketWeapon => m_Wrapper.m_FreeFlight_SelectRocketWeapon;
        public InputAction @SelectEnergyWeapon => m_Wrapper.m_FreeFlight_SelectEnergyWeapon;
        public InputActionMap Get() { return m_Wrapper.m_FreeFlight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FreeFlightActions set) { return set.Get(); }
        public void AddCallbacks(IFreeFlightActions instance)
        {
            if (instance == null || m_Wrapper.m_FreeFlightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FreeFlightActionsCallbackInterfaces.Add(instance);
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @VelocityChange.started += instance.OnVelocityChange;
            @VelocityChange.performed += instance.OnVelocityChange;
            @VelocityChange.canceled += instance.OnVelocityChange;
            @Strafe.started += instance.OnStrafe;
            @Strafe.performed += instance.OnStrafe;
            @Strafe.canceled += instance.OnStrafe;
            @ResetOrientation.started += instance.OnResetOrientation;
            @ResetOrientation.performed += instance.OnResetOrientation;
            @ResetOrientation.canceled += instance.OnResetOrientation;
            @Drift.started += instance.OnDrift;
            @Drift.performed += instance.OnDrift;
            @Drift.canceled += instance.OnDrift;
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @SelectGatlingWeapon.started += instance.OnSelectGatlingWeapon;
            @SelectGatlingWeapon.performed += instance.OnSelectGatlingWeapon;
            @SelectGatlingWeapon.canceled += instance.OnSelectGatlingWeapon;
            @SelectRocketWeapon.started += instance.OnSelectRocketWeapon;
            @SelectRocketWeapon.performed += instance.OnSelectRocketWeapon;
            @SelectRocketWeapon.canceled += instance.OnSelectRocketWeapon;
            @SelectEnergyWeapon.started += instance.OnSelectEnergyWeapon;
            @SelectEnergyWeapon.performed += instance.OnSelectEnergyWeapon;
            @SelectEnergyWeapon.canceled += instance.OnSelectEnergyWeapon;
        }

        private void UnregisterCallbacks(IFreeFlightActions instance)
        {
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @VelocityChange.started -= instance.OnVelocityChange;
            @VelocityChange.performed -= instance.OnVelocityChange;
            @VelocityChange.canceled -= instance.OnVelocityChange;
            @Strafe.started -= instance.OnStrafe;
            @Strafe.performed -= instance.OnStrafe;
            @Strafe.canceled -= instance.OnStrafe;
            @ResetOrientation.started -= instance.OnResetOrientation;
            @ResetOrientation.performed -= instance.OnResetOrientation;
            @ResetOrientation.canceled -= instance.OnResetOrientation;
            @Drift.started -= instance.OnDrift;
            @Drift.performed -= instance.OnDrift;
            @Drift.canceled -= instance.OnDrift;
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @SelectGatlingWeapon.started -= instance.OnSelectGatlingWeapon;
            @SelectGatlingWeapon.performed -= instance.OnSelectGatlingWeapon;
            @SelectGatlingWeapon.canceled -= instance.OnSelectGatlingWeapon;
            @SelectRocketWeapon.started -= instance.OnSelectRocketWeapon;
            @SelectRocketWeapon.performed -= instance.OnSelectRocketWeapon;
            @SelectRocketWeapon.canceled -= instance.OnSelectRocketWeapon;
            @SelectEnergyWeapon.started -= instance.OnSelectEnergyWeapon;
            @SelectEnergyWeapon.performed -= instance.OnSelectEnergyWeapon;
            @SelectEnergyWeapon.canceled -= instance.OnSelectEnergyWeapon;
        }

        public void RemoveCallbacks(IFreeFlightActions instance)
        {
            if (m_Wrapper.m_FreeFlightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFreeFlightActions instance)
        {
            foreach (var item in m_Wrapper.m_FreeFlightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FreeFlightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FreeFlightActions @FreeFlight => new FreeFlightActions(this);
    private int m_SpaceshipSchemeIndex = -1;
    public InputControlScheme SpaceshipScheme
    {
        get
        {
            if (m_SpaceshipSchemeIndex == -1) m_SpaceshipSchemeIndex = asset.FindControlSchemeIndex("Spaceship");
            return asset.controlSchemes[m_SpaceshipSchemeIndex];
        }
    }
    public interface IFreeFlightActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnVelocityChange(InputAction.CallbackContext context);
        void OnStrafe(InputAction.CallbackContext context);
        void OnResetOrientation(InputAction.CallbackContext context);
        void OnDrift(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnSelectGatlingWeapon(InputAction.CallbackContext context);
        void OnSelectRocketWeapon(InputAction.CallbackContext context);
        void OnSelectEnergyWeapon(InputAction.CallbackContext context);
    }
}
